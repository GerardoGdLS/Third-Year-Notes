package ca.ucalgary.ensf380;

import javax.swing.Timer;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import javax.swing.*;
import java.util.TimerTask;
import java.awt.Image;
import java.awt.Graphics;
import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.Dimension;
import java.awt.GridBagLayout;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import ca.ucalgary.edu.weather.Weather;

public class Ads {
    private Connection dbConnect;
    private Timer adTimer;
    private Timer mapTimer;
    
    public void createConnection() {
    	try {
    		Class.forName("com.mysql.cj.jdbc.Driver"); // Makes sure driver is registered
    		dbConnect = DriverManager.getConnection("jdbc:mysql://localhost:3306/myDB", "root", "gerardo2004"); //Establishes the connection
    		System.out.println("Connection Established Successfully"); // If it works
    	} catch(SQLException e) {
    		e.printStackTrace();
    	} catch (ClassNotFoundException e) {
            System.err.println("Driver not found. Please add the driver to your classpath.");
            e.printStackTrace();
    	}
    }

    private void setupTimers() {
        adTimer = new Timer(10000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                showNextAd();
            }
        });
        
        mapTimer = new Timer(5000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                showMap();
            }
        });
        
        adTimer.start();
        mapTimer.start();
    }

    private void showNextAd() {
        try (Statement stmt = dbConnect.createStatement()) {
            ResultSet rs = stmt.executeQuery(
                "SELECT a.* FROM Ads a " +
                "JOIN Ad_Schedule s ON a.id = s.ad_id " +
                "WHERE CURTIME() BETWEEN s.start_time AND s.end_time"
            );

            if (rs.next()) {
                // Display ad (text and/or media)
                String text = rs.getString("txt");
                String mediaPath = rs.getString("media_path");
                // Update UI with ad content
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void showMap() {
        // Display map logic
    }
    
    public List<Ad> fetchCurrentAd() { 
        List<Ad> ads = new ArrayList<>();
        String query = "SELECT a.* FROM Ads a JOIN Ad_Schedule s ON a.id = s.ad_id"; // Selects all from ad + ad_schedule table with matching Ids

        try (Statement stmt = dbConnect.createStatement(); ResultSet result = stmt.executeQuery(query)) {
            while (result.next()) { // Loop over all the items found using the query
                Ad ad = new Ad( //This creates a new ad for each ad by fetching the values in each of the listed columns
                    result.getInt("id"),
                    result.getString("txt"),
                    result.getString("media_path"),
                    result.getString("media_type"),
                    result.getTimestamp("created_at")
                );
                ads.add(ad);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return ads;
    }

	class Ad {
	    private int id;
	    private String txt;
	    private String path;
	    private String type;
	    private Timestamp time;
	    
	    Ad(int id, String txt, String path, String type, Timestamp time){
	    	this.id = id;
	    	this.txt = txt;
	    	this.path = path;
	    	this.type = type;
	    	this.time = time;
	    }
	    
	    public int getId() {
	    	return this.id;
	    }
	    
	    public String getTxt() {
	    	return this.txt;
	    }
	    
	    public String getPath() {
	    	return this.path;
	    }
	    
	    public String getType() {
	    	return this.type;
	    }
	    
	    public Timestamp getTime() {
	    	return this.time;
	    }
	    
	}

	public static class AdDisplayPanel extends JPanel {
	    private ImagePanel imagePanel;
	    private JTextArea weatherTextArea;
	    private Ads dbManager;
	    private int currentAdIndex = 0;
	    private List<Ads.Ad> ads;
	    private Timer adTimer;

	    public AdDisplayPanel(Ads dbManager, String cityCode) {
	        this.dbManager = dbManager;
	        setLayout(new BorderLayout());

	        // Create a panel for the top part with GridBagLayout
	        JPanel topPanel = new JPanel(new GridBagLayout());
	        GridBagConstraints gbc = new GridBagConstraints();
	        gbc.fill = GridBagConstraints.BOTH;
	        gbc.insets = new Insets(5, 5, 5, 5);

	        // Initialize the ImagePanel and add it to the top-left corner
	        imagePanel = new ImagePanel();
	        gbc.gridx = 0;
	        gbc.gridy = 0;
	        gbc.gridwidth = 1;
	        gbc.gridheight = 1;
	        gbc.weightx = 0.7;
	        gbc.weighty = 1.0;
	        gbc.anchor = GridBagConstraints.NORTHWEST;
	        topPanel.add(imagePanel, gbc);

	        // Add two columns with different sizes
	        JPanel col1 = new JPanel();
	        gbc.gridx = 1;
	        gbc.gridy = 0;
	        gbc.gridwidth = 1;
	        gbc.weightx = 0.2;
	        gbc.weighty = 1.0;
	        topPanel.add(col1, gbc);

	        JPanel col2 = new JPanel();
	        gbc.gridx = 2;
	        gbc.gridy = 0;
	        gbc.gridwidth = 1;
	        gbc.weightx = 0.1;
	        gbc.weighty = 1.0;
	        topPanel.add(col2, gbc);

	        add(topPanel, BorderLayout.CENTER);

	        // Create and add a weather panel to the top-right corner
	        JPanel weatherPanel = new JPanel(new BorderLayout());
	        weatherPanel.setPreferredSize(new Dimension(300, 0)); // Set width and allow height to grow
	        weatherTextArea = new JTextArea("Loading weather...");
	        weatherTextArea.setEditable(false);
	        weatherTextArea.setLineWrap(true);
	        weatherTextArea.setWrapStyleWord(true);
	        weatherTextArea.setFont(weatherTextArea.getFont().deriveFont(25f)); // Increase font size
	        weatherPanel.add(new JScrollPane(weatherTextArea), BorderLayout.CENTER); // Add JTextArea to center of JPanel
	        add(weatherPanel, BorderLayout.EAST);

	        // Create and add a bottom bar panel
	        JPanel bottomBar = new JPanel();
	        bottomBar.setPreferredSize(new Dimension(getWidth(), 100));
	        add(bottomBar, BorderLayout.SOUTH);

	        loadAds();
	        startAdRotation();
	        initializeWeather(cityCode); // Initialize weather data with city code
	    }

	    private void loadAds() {
	        ads = dbManager.fetchCurrentAd();
	        if (ads.isEmpty()) {
	            System.out.println("No ads loaded");
	        } else {
	            System.out.println("Loaded ads:");
	            for (Ads.Ad ad : ads) {
	                System.out.println("Ad: " + ad.getTxt() + ", " + ad.getPath());
	            }
	        }
	    }

	    private void startAdRotation() {
	        adTimer = new Timer(10000, new ActionListener() {
	            @Override
	            public void actionPerformed(ActionEvent e) {
	                if (ads != null && !ads.isEmpty()) {
	                    Ads.Ad currentAd = ads.get(currentAdIndex);
	                    String imagePath = currentAd.getPath();
	                    System.out.println("Loading image from: " + imagePath);

	                    ImageIcon imageIcon = new ImageIcon(imagePath);
	                    Image image = imageIcon.getImage().getScaledInstance(imagePanel.getWidth(), imagePanel.getHeight(), Image.SCALE_SMOOTH);
	                    imagePanel.setImage(image);
	                    currentAdIndex = (currentAdIndex + 1) % ads.size();
	                }
	            }
	        });

	        adTimer.start();
	    }

	    private void initializeWeather(String cityCode) {
	        Weather weather = new Weather(cityCode); // Initialize with the city code parameter
	        String weatherReport = weather.getWeatherReport(cityCode);
	        weatherTextArea.setText(weatherReport);
	    }

	    static class ImagePanel extends JPanel {
	        private Image image;

	        public void setImage(Image image) {
	            this.image = image;
	            repaint();
	        }

	        @Override
	        protected void paintComponent(Graphics g) {
	            super.paintComponent(g);
	            if (image != null) {
	                g.drawImage(image, 0, 0, getWidth(), getHeight(), this);
	            }
	        }
	    }
	}



	
	// Custom JPanel to display the image
	static class ImagePanel extends JPanel {
	    private Image image;

	    public void setImage(Image image) {
	        this.image = image;
	        repaint();
	    }

	    @Override
	    protected void paintComponent(Graphics g) {
	        super.paintComponent(g);
	        if (image != null) {
	            // Draw the image scaled to fit the panel
	            g.drawImage(image, 0, 0, getWidth(), getHeight(), this);
	        }
	    }
	}
	
	public static class WeatherDisplayPanel extends JPanel {
        private JLabel weatherLabel;
        private Timer weatherTimer;
        private Weather weatherFetcher; // Assuming Weather class has a method to get weather info

        public WeatherDisplayPanel(Weather weatherFetcher) {
            this.weatherFetcher = weatherFetcher;
            weatherLabel = new JLabel("Loading weather...", SwingConstants.CENTER);
            add(weatherLabel);
            setPreferredSize(new Dimension(200, 100)); // Adjust size as needed
            fetchWeather();
            startWeatherUpdates();
        }

        private void fetchWeather() {
            // This method should be updated to correctly fetch and display the weather
            String weatherInfo = weatherFetcher.getWeatherReport("Calgary"); // Assuming getWeather returns a string of weather info
            weatherLabel.setText(weatherInfo);
        }

        private void startWeatherUpdates() {
            weatherTimer = new Timer(60000, new ActionListener() { // Update every 60 seconds
                @Override
                public void actionPerformed(ActionEvent e) {
                    fetchWeather();
                }
            });

            weatherTimer.start(); // Start timer
        }
    }

    
	public static void main(String[] args) {
	    if (args.length < 1) {
	        System.err.println("Usage: java Ads <cityCode>");
	        System.exit(1);
	    }

	    String cityCode = args[0];
	    Ads dbManager = new Ads();
	    dbManager.createConnection();

	    JFrame frame = new JFrame("Advertisement Display");
	    AdDisplayPanel adPanel = new Ads.AdDisplayPanel(dbManager, cityCode);
	    frame.add(adPanel);
	    frame.setSize(800, 600);
	    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	    frame.setVisible(true);

	    // Fetch and print weather info for initial check
	    Weather weather = new Weather(cityCode);
	    String report = weather.getWeatherReport(cityCode);
	    System.out.println(report);
	}
}